{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f1e3216e",
   "metadata": {},
   "source": [
    "Nama : Zulfikar Irham\n",
    "\n",
    "NIM : 21/475393/PA/20574"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5c1bd46",
   "metadata": {},
   "source": [
    "### 0.2.1 Komentar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fe210883",
   "metadata": {},
   "outputs": [],
   "source": [
    "#komentar merupakan kode yang tidak dijalankan mesin"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69993349",
   "metadata": {},
   "source": [
    "### 0.2.2 Variabel\n",
    "\n",
    "Variabel merupakan tempat menyimpan data yang bersifat mutable (nilainya dapat diubah-ubah)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4fcc75fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "x = 12\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1499c5b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Zulfikar Irham\n"
     ]
    }
   ],
   "source": [
    "nama_saya = \"Zulfikar Irham\"\n",
    "print(nama_saya)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3094cb3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4\n"
     ]
    }
   ],
   "source": [
    "y = 0.4\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "552ea916",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "z = True\n",
    "print(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7dade7f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    }
   ],
   "source": [
    "x = 13\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cb1d863",
   "metadata": {},
   "source": [
    "Nilai x yang awalnya 12 berubah menjadi 13 artinya variabel bersifat mutable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a654461c",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'X' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [8]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mX\u001b[49m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'X' is not defined"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b68eed1c",
   "metadata": {},
   "source": [
    "Variable itu sangat sensitif terhadap penggunaan huruf kecil dan kapital, jika kita menamai variabel dengan \"x\" maka jika diprint \"X\" itu akan terjadi error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb9dd088",
   "metadata": {},
   "source": [
    "### 0.3 Bilangan Bulat dan Pecahan(Floating Point)\n",
    "### 0.3.1 Bilangan Bulat\n",
    "\n",
    "ketika kita membuat sebuah variabel dengan x = 122 Python akan otomatis membaca nilai tersebut bertipe data int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3308b2b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 122\n",
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "25b580dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sys import getsizeof, maxsize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "86baf2b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "getsizeof(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "56588f05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = 929339499493\n",
    "getsizeof(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2914d589",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9223372036854775807"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maxsize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "acd751a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "getsizeof(maxsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22ccc255",
   "metadata": {},
   "source": [
    "getsizeof digunakan untuk mengetahui cacah bit yang digunakan serta maxsize digunakan untuk mengetahui bilangan bulat maksimum yang diproses"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ac71e08",
   "metadata": {},
   "source": [
    "### 0.3.2 Bilangan Pecahan (Float)\n",
    "\n",
    "Float merupakan tipe data untuk bilangan pecahan yang dapat dinyatakan dalam $0.0045$ atau $4.5e-3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1dbc5255",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0045"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num = 0.0045\n",
    "num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "00dbed39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0045"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num = 4.5e-3\n",
    "num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3877a185",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(num)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "561272d1",
   "metadata": {},
   "source": [
    "### 0.3.3 Bilangan Kompleks dan Rasional\n",
    "\n",
    "Bilangan kompleks dapat dinyatakan dengan $z = 3 + 6i$, dimana $i = \\sqrt{-1}$ dan jika di Python i dapat diganti dengan j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "43c1bc79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3+6j)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z = (3+6j)\n",
    "z"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fef3f4ea",
   "metadata": {},
   "source": [
    "Bilangan rasional merupakan bilangan yang dapat dinyatakan dalam bentuk perbandingan $\\frac{a}{b}$, Python tidak dapat menyatakan bilangan dalam bentuk bilangan rasional melainkan desimal sehingga digunakanlah *library* **fractions** dengan perintah **Fraction**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b4127484",
   "metadata": {},
   "outputs": [],
   "source": [
    "from fractions import Fraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3eec5f97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fraction(2, 1)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_ras = Fraction(4,2)\n",
    "num_ras"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f8278b3",
   "metadata": {},
   "source": [
    "Fraction(2,1) angka 2 merupakan pembilang dan 1 merupakan penyebut atau dapat dinyatakan dengan $\\frac{2}{1}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bd75b3a",
   "metadata": {},
   "source": [
    "### 0.4 Operasi Matematika dan Fungsi Dasar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "368b42bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4.8+2.5j)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 4.8 + 2.5j\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "39c70197",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = 2.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "059ce726",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9.6+5j)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#operasi perkalian\n",
    "x*y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b588871b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2.4+1.25j)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#operasi pembagian\n",
    "x/y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a2e7ab29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.8+2.5j)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#operasi pertambahan\n",
    "x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fea3fde6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2.8+2.5j)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#operasi pengurangan\n",
    "x-y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "aa0e59e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20.592+157.17499999999998j)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#operasi pangkat\n",
    "x**3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bd762fd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi modulo\n",
    "num = 7\n",
    "num%2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "27136082",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.6666666666666665"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y + Fraction(4,6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "67dba635",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sin(x) = 0.479425538604203\n",
      "sin(x) = 0.8775825618903728\n"
     ]
    }
   ],
   "source": [
    "#Function\n",
    "from math import cos, sin\n",
    "x = 0.5\n",
    "sinx = sin(x)\n",
    "cosx = cos(x)\n",
    "print(f\"sin(x) = {sinx}\")\n",
    "print(f\"sin(x) = {cosx}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7e9fc82",
   "metadata": {},
   "source": [
    "### 0.4.1 Operasi Boolean dan Perbandingan Numerik"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ab484cac",
   "metadata": {},
   "outputs": [],
   "source": [
    "num1 = 20\n",
    "num2 = 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7223db69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#operasi kesamaan\n",
    "kondisi1 = num1 == num2\n",
    "kondisi1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "53a2f4dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi ketidaksamaan\n",
    "kondisi2 = num1 != num2\n",
    "kondisi2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c9fe549b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi kurang dari\n",
    "num1 < num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "85bdd702",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi kurang dari sama dengan\n",
    "num1 <= num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "ca28c323",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi lebih dari\n",
    "num1 > num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "715c93c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi lebih dari sama dengan\n",
    "num1 >= num2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6c0e5ead",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi negasi jika kondisi1 bernilai True maka jika di-not-kan akan bernilai False\n",
    "not(kondisi1) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7fa7330e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Operasi AND jika salah satu true maka hasilnya false dan jika keduanya true maka hasilnya true\n",
    "kondisi1 and kondisi2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "bafeb736",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi or jika salah satu true maka hasilnya akan true\n",
    "kondisi1 or kondisi2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea8e1fea",
   "metadata": {},
   "source": [
    "### 0.4.2 Operasi Pembaruan (Updating)\n",
    "\n",
    "Operasi ini digunakan untuk memperbarui suatu nilai dalam variabel misalnya $z += 4$ artinya variabel z akan ditambah dengan angka 4 atau bisa ditulis $z = z + 4$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "4a8b7e97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n"
     ]
    }
   ],
   "source": [
    "#Operasi pertambahan\n",
    "z = 10\n",
    "z += 4\n",
    "print(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "dfdd9821",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi pengurangan\n",
    "a = 12\n",
    "a -= 4\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f41c84ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi perkalian\n",
    "b = 3\n",
    "b *= 4\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0ad3d96f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi pembagian\n",
    "c = 20\n",
    "c /= 4\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d00997e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Operasi pangkat\n",
    "d = 3\n",
    "d **= 3\n",
    "d"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22ccc10e",
   "metadata": {},
   "source": [
    "### 0.5 Array\n",
    "\n",
    "*Array* merupakan jenis variable berupa jajaran dari nilai-nilai yang disajikan dalam bentuk 1, 2\n",
    "hingga multi-dimensi. *Array* dalam 1 dimensi merupakan vektor yang berupa matriks baris, *array* berdimensi 2 di sebut matriks 2 dimensi, *array* 3 dimensi bisa disebut juga sebagai matriks berdimensi 3. Atau ada istilah lain untuk menyebut *array*,m yaitu dengan tensor. misalnya sebuah skalar 5 disebut tensor-0, *array* berdimensi 1 disebut tensor-1, *array* berdimensi 2 disebut tensor-2, dan *array* berdimensi 3 disebut tensor-3.\n",
    "\n",
    "Dalam *Python* untuk membuat sebuah *array* diperlukan *library* **NumPy(Numerical Python)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c1df2679",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "0f0d1b43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[10 15 20]\n",
      "(3,)\n"
     ]
    }
   ],
   "source": [
    "#array berdimensi 1\n",
    "array1 = np.array([10,15,20])\n",
    "print(array1)\n",
    "print(array1.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "610b9558",
   "metadata": {},
   "source": [
    "Matriks di atas berdimensi 1 dan memiliki 3 buah angka di dalam *array*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "06867bbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10 15 20]\n",
      " [25 30 35]\n",
      " [40 45 50]]\n",
      "(3, 3)\n"
     ]
    }
   ],
   "source": [
    "#array 2 dimensi\n",
    "array2 = np.array([[10,15,20],[25,30,35],[40,45,50]])\n",
    "print(array2)\n",
    "print(array2.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0eca226a",
   "metadata": {},
   "source": [
    "Matriks di atas memiliki 3 baris dan 3 kolom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "dd67334c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "c = np.zeros((4,5)) #Matriks 4x5 yang semua nilainya adalah 0\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "9d0d8d7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 1. 1. 1.]\n",
      " [1. 1. 1. 1.]\n",
      " [1. 1. 1. 1.]\n",
      " [1. 1. 1. 1.]]\n"
     ]
    }
   ],
   "source": [
    "d = np.ones((4,4)) #matriks 4x4 yang semua nilainya adalah 1\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "23c192de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.   2.5  5.   7.5 10. ]\n"
     ]
    }
   ],
   "source": [
    "e = np.linspace(0,10,5) #Operasi untuk menghasilkan sebuah array dengan nilai dari 0 sampai 10 berjumlah 5 \n",
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "adc27660",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.51670584 0.61862481 0.86348765]\n",
      " [0.66318882 0.83802276 0.98151152]\n",
      " [0.15533343 0.98383498 0.32535867]]\n"
     ]
    }
   ],
   "source": [
    "f = np.random.rand(3,3) #Matriks ord 3x3 yang berisi nilai random dengan interval 0 sampai 1\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d192fb93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5, 8, 6],\n",
       "       [0, 5, 7],\n",
       "       [2, 5, 0]])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Matriks orde 3x2 yang menghasilkan nilai random integer dengan rentang angka 0 sampai 10\n",
    "g = np.random.randint(0, 10, size=(3,3)) \n",
    "g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "191fcc62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h = np.arange(6) #Menghasilkan array dengan bilangan integer mulai dari angka 1 sampai 5\n",
    "h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5009a41f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1],\n",
       "       [2, 3],\n",
       "       [4, 5]])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h.reshape(3,2) #Merubah bentuk array yang tadinya (6,) menjadi (3,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "78b5d5b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "print(f.size) #untuk menunjukkan cacah unsur suatu matriks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e367e865",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "print(f.ndim) #Operasi untuk menunjukkan dimensi dari sebuah matriks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37e5dadb",
   "metadata": {},
   "source": [
    "### 0.5.2 Indeks dalam array\n",
    "\n",
    "Indeks dalam array pada python dimulai dari angka 0 dan seterusnya. Misalnya kita punya *array* $x=[1,2,3]$ index 0 bernilai 1, index 1 bernilai 2, dan index 2 bernilai 3. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "76a3c7db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4, 5, 6])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.arange(1,7)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "e719ab90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[3] #Menghasilkan nilai dengan index 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c2ad32fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 4])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:4] #Operasi slicing untuk mengambil array mulai dari index 0 sampai 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "634e5dc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4, 5])"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[2:5] #Untuk mengambil nilai array mulai dari index 2 sampai 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "3c86d988",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 6, 2],\n",
       "       [6, 1, 7],\n",
       "       [8, 1, 0]])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = np.random.randint(0,10, size=(3,3))\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "5df4317c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y[1,1] #Mengambil nilai array di baris dengan index 1 dan kolom dengan index 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "1680de3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 7, 0])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y[:,2] #Mengambil nilai array untuk semua kolom pada index ke 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "93d5e0ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 6, 2, 6, 1, 7, 8, 1, 0])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y.reshape(9,) #Merubah bentuk matriks menjadi 1 dimensi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2db0dc16",
   "metadata": {},
   "source": [
    "### 0.5.3 Operasi Vektorisasi Pada Array\n",
    "\n",
    "Operasi vektorisasi merupakan operasi matematika yang bekerja pada seluruh unsur pada array\n",
    "secara bersamaan, bukan satu persatu pada tiap unsur array. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "90be04d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A1 = np.arange(0,5)\n",
    "A1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "061302ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7,  8,  9, 10, 11])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A2 = np.arange(7,12)\n",
    "A2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "0ccb79e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 7,  9, 11, 13, 15])"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A1+A2 #Menjumlahkan masing-masing unsur matriks A1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "9d0dcf9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5, 3],\n",
       "       [2, 8]])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B1 = np.random.randint(0,10, size = (2,2))\n",
    "B1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "a05c0ae2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2, 5],\n",
       "       [5, 7]])"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B2 = np.random.randint(0,10, size = (2,2))\n",
    "B2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2b4b5fa1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[10, 15],\n",
       "       [10, 56]])"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B1*B2 #Ini bukan perkalian matriks, tetapi mengalikan setiap unsur matriks B1 dan B2 dengan indeks yang sama"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "5e9f76d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[25, 46],\n",
       "       [44, 66]])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B1@B2 #@ untuk operasi perkalian matriks B1 dan B2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "87dd079c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3, -2],\n",
       "       [-3,  1]])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B1 - B2 #Pengurangan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "5a959efd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[15,  9],\n",
       "       [ 6, 24]])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "3*B1 #Perkalian matriks B1 dengan skalar 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac6df62a",
   "metadata": {},
   "source": [
    "### 0.5.4 Operasi Broadcasting \n",
    "\n",
    "Persyaratan agar operasi vektorisasi berbasis *element-wise* berlaku adalah adanya kesamaan orde\n",
    "bagi array yang terlibat dalam operasi. Apabila *array* yang terlibat ternyata tidak memiliki orde\n",
    "yang sama maka proses *element-wise* diimplemnetasikan melalui operasi broadcasting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "9337e38c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4, 6],\n",
       "       [4, 9],\n",
       "       [9, 3]])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C1 = np.random.randint(0,10, size=(3,2))\n",
    "C1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "9f78fb28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[9, 4]])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C2 = np.random.randint(0,10, size=(1,2))\n",
    "C2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "c6732071",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13 10]\n",
      " [13 13]\n",
      " [18  7]]\n"
     ]
    }
   ],
   "source": [
    "C_tambah = C1+C2\n",
    "print(C_tambah)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "5fd41b01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-5,  2],\n",
       "       [-5,  5],\n",
       "       [ 0, -1]])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C_kurang = C1-C2\n",
    "C_kurang"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce765947",
   "metadata": {},
   "source": [
    "### 0.6 Blok atau Gabungan Perintah\n",
    "\n",
    "Blok atau gabungan beberapa perintah dalam python dapat berupa *looping*, *conditional*, dan bentuk fungsi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "a320a091",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "2\n",
      "4\n",
      "6\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,10):\n",
    "    if i % 2 == 0:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "babc61a0",
   "metadata": {},
   "source": [
    "Program di atas menampilkan range angka dari 0 sampai 9 dan menampilkan hanya angka yang genap"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f93241a",
   "metadata": {},
   "source": [
    "### 0.7 Fungsi dalam python\n",
    "\n",
    "Fungsi dalam python sama seperti dalam matematika dapat dinyatakan dengan def fung(x) dan x sebagai parameter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "1d6bbefa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24\n"
     ]
    }
   ],
   "source": [
    "def fung(x,y):\n",
    "    hasil = x**2+2*x*y-x*y\n",
    "    return hasil\n",
    "\n",
    "hasil = fung(4,2)\n",
    "print(hasil)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78324dcc",
   "metadata": {},
   "source": [
    "Fungsi dalam python bisa juga dinyatakan ke dalam bentuk *lambda expression*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "d8709845",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fungsi = lambda x,y : x**2+2*x*y-x*y\n",
    "fungsi(4,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82e72335",
   "metadata": {},
   "source": [
    "### 0.8 Proses Bersyarat\n",
    "\n",
    "Proses bersyarat atau *conditions* dalam *python* sintaksnya menggunakan if-elif-else"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "dcc84b1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1 merupakan Bilangan negatif\n",
      "2 merupakan Bilangan positif\n"
     ]
    }
   ],
   "source": [
    "x = -1\n",
    "y = 2\n",
    "def cekposneg(x):\n",
    "    if x < 0:\n",
    "        return \"Bilangan negatif\"\n",
    "    else:\n",
    "        return \"Bilangan positif\"\n",
    "print(f\"{x} merupakan {cekposneg(x)}\")\n",
    "print(f\"{y} merupakan {cekposneg(y)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79ffaef9",
   "metadata": {},
   "source": [
    "Program di atas artinya jika x kurang dari 0 maka akan mencetak sebuah kalimat yang memberitahu nilai negatif, dan jika bukan kurang dari nol maka akan mencetak kalimat yang membertiahu nilai positif"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b802328",
   "metadata": {},
   "source": [
    "### 0.9 Proses Berualang (Looping)\n",
    "\n",
    "Untuk melakukan suatu perulangan dari proses program yang panjang. Perulangan bisa menggunakan **for loop** atau **while loop**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "6260ee22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "4\n",
      "9\n",
      "16\n",
      "25\n",
      "36\n",
      "49\n",
      "64\n",
      "81\n"
     ]
    }
   ],
   "source": [
    "def kuadrat(n):\n",
    "    for i in range(0,n):\n",
    "        i **= 2\n",
    "        print(i)\n",
    "kuadrat(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "22dbed9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "8\n",
      "16\n"
     ]
    }
   ],
   "source": [
    "def total(i):\n",
    "    i = 1\n",
    "    while (i < 10):\n",
    "        i *= 2\n",
    "        print(i)\n",
    "total(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb78adf1",
   "metadata": {},
   "source": [
    "### 0.10 Modul Tambahan\n",
    "\n",
    "Untuk beberapa keperluan kita memerlukan modul tambahan contohnya dalam pengoperasian array atau matriks kita membutuhkan *library* NumPy dengan pemanggilan import numpy as np. Untuk mengolah data seperti di excel kita membutuhan *library* pandas cara pemanggilannya dengan import pandas as pd. Untuk visualisasi data dapat menggunakan *library* matplotlib atau seaborn.\n",
    "\n",
    "Untuk meringankan kebutuhan memori, kadang hanya diperlukan sebagian dari keseluruhan library.\n",
    "Perintah untuk hal ini dapat dilakukan dengan sintak from dan import sebagai contoh\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier.\n",
    "\n",
    "Perintah tersebut untuk machine learning dengan algoritma Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4393d7c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d031d54f",
   "metadata": {},
   "source": [
    "### 0.11 Visualisasi Data\n",
    "\n",
    "Visualisasi data dengan matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a92159b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = np.linspace(-10,10,100)\n",
    "\n",
    "def fungsi(x):\n",
    "    return x**3+2*x**2-4*x+2\n",
    "\n",
    "y = fungsi(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8cc80d9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(X,y, color = \"green\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y = f(x)\")\n",
    "plt.title(\"Grafik fungsi $f(x)=x^3+2x^2-4x+2$\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "baf38c36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y1 = sin(x)</th>\n",
       "      <th>y2 = cos(x)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-6.283185</td>\n",
       "      <td>2.449294e-16</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-6.220038</td>\n",
       "      <td>6.310563e-02</td>\n",
       "      <td>0.998007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-6.156890</td>\n",
       "      <td>1.259597e-01</td>\n",
       "      <td>0.992035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-6.093743</td>\n",
       "      <td>1.883117e-01</td>\n",
       "      <td>0.982109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-6.030595</td>\n",
       "      <td>2.499130e-01</td>\n",
       "      <td>0.968268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          x   y1 = sin(x)  y2 = cos(x)\n",
       "0 -6.283185  2.449294e-16     1.000000\n",
       "1 -6.220038  6.310563e-02     0.998007\n",
       "2 -6.156890  1.259597e-01     0.992035\n",
       "3 -6.093743  1.883117e-01     0.982109\n",
       "4 -6.030595  2.499130e-01     0.968268"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.linspace(-2*np.pi, 2*np.pi, 200)\n",
    "y1 = np.sin(x)\n",
    "y2 = np.cos(x)\n",
    "df = pd.DataFrame({\"x\" : x,\n",
    "                  \"y1 = sin(x)\": y1,\n",
    "                  \"y2 = cos(x)\": y2})\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "041276e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lineplot(data=df.drop(\"x\", axis = 1))\n",
    "plt.grid()\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d945dd87",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:machinelearning]",
   "language": "python",
   "name": "conda-env-machinelearning-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
